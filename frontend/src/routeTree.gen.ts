/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as AuthenticatedIndexRouteImport } from './routes/_authenticated/index'
import { Route as AuthenticatedProfileRouteImport } from './routes/_authenticated/profile'
import { Route as AuthenticatedFavoritesRouteImport } from './routes/_authenticated/favorites'
import { Route as AuthenticatedPostSubredditIdTitleRouteImport } from './routes/_authenticated/post.$subreddit.$id.$title'

const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedProfileRoute = AuthenticatedProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedFavoritesRoute = AuthenticatedFavoritesRouteImport.update({
  id: '/favorites',
  path: '/favorites',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedPostSubredditIdTitleRoute =
  AuthenticatedPostSubredditIdTitleRouteImport.update({
    id: '/post/$subreddit/$id/$title',
    path: '/post/$subreddit/$id/$title',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/auth': typeof AuthRoute
  '/favorites': typeof AuthenticatedFavoritesRoute
  '/profile': typeof AuthenticatedProfileRoute
  '/': typeof AuthenticatedIndexRoute
  '/post/$subreddit/$id/$title': typeof AuthenticatedPostSubredditIdTitleRoute
}
export interface FileRoutesByTo {
  '/auth': typeof AuthRoute
  '/favorites': typeof AuthenticatedFavoritesRoute
  '/profile': typeof AuthenticatedProfileRoute
  '/': typeof AuthenticatedIndexRoute
  '/post/$subreddit/$id/$title': typeof AuthenticatedPostSubredditIdTitleRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/auth': typeof AuthRoute
  '/_authenticated/favorites': typeof AuthenticatedFavoritesRoute
  '/_authenticated/profile': typeof AuthenticatedProfileRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/post/$subreddit/$id/$title': typeof AuthenticatedPostSubredditIdTitleRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/auth'
    | '/favorites'
    | '/profile'
    | '/'
    | '/post/$subreddit/$id/$title'
  fileRoutesByTo: FileRoutesByTo
  to: '/auth' | '/favorites' | '/profile' | '/' | '/post/$subreddit/$id/$title'
  id:
    | '__root__'
    | '/_authenticated'
    | '/auth'
    | '/_authenticated/favorites'
    | '/_authenticated/profile'
    | '/_authenticated/'
    | '/_authenticated/post/$subreddit/$id/$title'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  AuthRoute: typeof AuthRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/profile': {
      id: '/_authenticated/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthenticatedProfileRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/favorites': {
      id: '/_authenticated/favorites'
      path: '/favorites'
      fullPath: '/favorites'
      preLoaderRoute: typeof AuthenticatedFavoritesRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/post/$subreddit/$id/$title': {
      id: '/_authenticated/post/$subreddit/$id/$title'
      path: '/post/$subreddit/$id/$title'
      fullPath: '/post/$subreddit/$id/$title'
      preLoaderRoute: typeof AuthenticatedPostSubredditIdTitleRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedFavoritesRoute: typeof AuthenticatedFavoritesRoute
  AuthenticatedProfileRoute: typeof AuthenticatedProfileRoute
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
  AuthenticatedPostSubredditIdTitleRoute: typeof AuthenticatedPostSubredditIdTitleRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedFavoritesRoute: AuthenticatedFavoritesRoute,
  AuthenticatedProfileRoute: AuthenticatedProfileRoute,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
  AuthenticatedPostSubredditIdTitleRoute:
    AuthenticatedPostSubredditIdTitleRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  AuthRoute: AuthRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
